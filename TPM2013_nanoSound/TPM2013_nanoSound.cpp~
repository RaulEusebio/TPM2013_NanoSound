#include "Arduino.h"
#include "TPM2013_nanoSound.h"
#define STOP 0xAB
#define NEXT 0xAC
#define PREVIOUS 0xAD
#define VOLUME 0xAE


TPM2013_nanoSound::TPM2013_nanoSound(HardwareSerial &printer)
{
  printer = &print; //operate on the address of print
  printer -> begin(9600);
}


// Play a file .MP3
// Receive an array with the name of the file of 4 characters
int TPM2013_nanoSound::play_music(char file_name[4])
{
  lenght=0x07; // Number of the bytes in command
  command_code = 0xA3; // Command to play a file
  char c1 = file_name[0];
  char c2 = file_name[1];
  char c3 = file_name[2];
  char c4 = file_name[3];

  // Sum of several commands
  check_code = lenght + command_code + c1 + c2 + c3 + c4; 
  check_code = check_code & 0x0FF; // Delete of the 4 more significant bits
  // Send commands 
  printer->write(start_code);
  printer->write(lenght);
  printer->write(command_code);
  printer->write(c1);
  printer->write(c2);
  printer->write(c3);
  printer->write(c4);
  printer->write(check_code);
  printer->write(end_code);

  return 0;
}


// Stop the playback
int TPM2013_nanoSound::stop_playback(void)
{
  lenght=0x03;
  command_code = 0xAB;
  check_code = 0xAE;
  printer->write(start_code);
  printer->write(lenght);
  printer->write(command_code);
  printer->write(check_code);
  printer->write(end_code);
  return 0;
}


// Next playback
int TPM2013_nanoSound::next_playback(void){
  lenght=0x03;
  command_code = 0xAC;
  check_code = 0xAF;
  printer->write(start_code);
  printer->write(lenght);
  printer->write(command_code);
  printer->write(check_code);
  printer->write(end_code);  
}


// Previous playback
int TPM2013_nanoSound::previous_playback(void)
{
  lenght=0x03;
  command_code = 0xAD;
  check_code = 0xB0;
  printer->write(start_code);
  printer->write(lenght);
  printer->write(command_code);
  printer->write(check_code);
  printer->write(end_code);
  return 0;
}


// Volume control from 00 - 1F
// 00 is mute, 31 is maximum.
int volume_control(int volume)
{
  lenght=0x04;
  command_code = VOLUME;
  check_code = lenght + command_code + volume;
  
  printer->write(start_code);
  printer->write(lenght);
  printer->write(command_code);
  printer->write(volume);
  printer->write(check_code);
  printer->write(end_code);
  return 0;
}
